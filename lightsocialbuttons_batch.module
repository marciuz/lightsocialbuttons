<?php
/**
 * @file
 * Submodule of lightsocialbuttons.
 * This module allows batch update of the cache table.
 */

function lightsocialbuttons_batch_menu() {

  $items['admin/config/media/lightsocialbuttons/batch'] = array(
    'title' => 'Batch',
    'description' => 'Get all the share from all the contents',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightsocialbuttons_batch_simple_form'),
    'access arguments' => array('access administration pages'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * --- TEST ---
 **/
function _lightsocialbuttons_batch_test() {

  return '';
}

function _lightsocialbuttons_get_urls($filter=NULL) {

  $paths=array();

  $result=db_query("SELECT x.loc, x.id, x.type, u.alias 
                  FROM {xmlsitemap} AS x 
                  LEFT JOIN {url_alias} AS u ON x.loc=u.source 
                  WHERE x.status=1
                  AND x.access=1
                  ");          

  foreach ($result as $r) {

    if ($r->alias !== NULL) {
      $r->loc=$r->alias;
    }
    unset($r->alias);
    $paths[]=$r;
  }

  return $paths;
}

/**
 *  Delete cache records
 *
 *  @param mixed $filter
 *     Default NULL, for future implementations 
 *  @return int $num_deleted 
 */
function _lightsocialbuttons_clear_urls($filter=NULL) {
  $num_deleted = db_delete('lightsocialbuttons')->execute();
  return $num_deleted;
}

/**
 * 
 * @return object $form
 */
function lightsocialbuttons_batch_simple_form() {

  $form['description'] = array(
    '#type' => 'markup',
    '#markup' => "<p>" . t('Analyze and put in cache the share data for all the contents of the xmlsitemap') . "</p>",
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start batch'),
  );

  return $form;
}


function lightsocialbuttons_batch_simple_form_submit($form, &$form_state) {
  $function = 'lightsocialbuttons_batch_batch_1';

  // Reset counter for debug information.
  $_SESSION['http_request_count'] = 0;

  // Execute the function named batch_example_1 or batch_example_2.
  $batch = $function();
  batch_set($batch);
}

function _lightsocialbuttons_batch_record($o, &$context) {

  global $base_url;

  $path = $base_url . '/' . $o['loc'];

  $L = new LightSocialButtons($path);

  $nid = ($o['type'] == 'node') ? $o['id'] : NULL;

  $res = $L->get_counts_all($nid);

  $feedback = ($res>0) ? 'OK':'Error!';

  $context['results'][] = $path . ' : ' . $feedback;
  $context['message'] = t('Caching data for the url "@title"', array('@title' => $path)) . ' : <strong>' . $feedback . "</strong>";
  _lightsocialbuttons_batch_http_requests();
}

function _lightsocialbuttons_batch_http_requests() {
  $_SESSION['http_request_count']++;
}

function _lightsocialbuttons_batch_get_http_requests() {
  return !empty($_SESSION['http_request_count']) ? $_SESSION['http_request_count'] : 0;
}



function lightsocialbuttons_batch_batch_1() {

  // Clear URLs
  $cleared = _lightsocialbuttons_clear_urls();

  $paths = _lightsocialbuttons_get_urls();    

  $num_operations = count($paths);

  drupal_set_message(t('Looking for share data of @num pages', array('@num' => $num_operations)));

  $operations = array();
  // Set up an operations array with 1000 elements, each doing function
  // batch_example_op_1.
  // Each operation in the operations array means at least one new HTTP request,
  // running Drupal from scratch to accomplish the operation. If the operation
  // returns with $context['finished'] != TRUE, then it will be called again.
  // In this example, $context['finished'] is always TRUE.
  for ($i = 0; $i < $num_operations; $i++) {
    // Each operation is an array consisting of
    // - The function to call.
    // - An array of arguments to that function.

    $path = (array) $paths[$i];

    $operations[] = array(
      '_lightsocialbuttons_batch_record',
      array($path),
    );
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'lightsocialbuttons_batch_finished',
  );
  return $batch;

}



function lightsocialbuttons_batch_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count results processed in @requests HTTP requests.', array('@count' => count($results), '@requests' => _lightsocialbuttons_batch_get_http_requests())));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array(
      '@operation' => $error_operation[0],
      '@args' => print_r($error_operation[0], TRUE),
    )));
  }
}