<?php


function lightsocialbuttons_stats_help(){

}

/**
 * Implements hook_permission
 */
function lightsocialbuttons_stats_permission() {
  return array(
    'show lightsocialbuttons statistics' => array(
      'title' => t('Show LightSocialButtons statstics'),
      'description' => t('Show a new tab in the contents'),
    ),
  );
}

function lightsocialbuttons_stats_menu(){

  $items['node/%node/lightsocialbuttons_stats'] = array(
    'title' => 'Sharing stats',
    'page callback' => '_lightsocialbuttons_stats_node',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 30,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}


function _lightsocialbuttons_stats_uty_jsdate($date){

  $jsdate = explode("-",$date);
  $jsdate[1]--;

  return "Date.UTC(" . intval($jsdate[0]) . "," . intval($jsdate[1]) . "," . intval($jsdate[2]) . ")";
}


function _lightsocialbuttons_stats_node($node){

  $url = _lightsocialbuttons_realurl();

  $LS = new LightSocialButtonsStats($url);

  $stats = $LS->get_stats($node->nid);

  if (is_array($stats) && count($stats)>1){ 

    $series=array();

    $obj_twitter = new stdClass();
    $obj_twitter->name = 'twitter';
    $obj_twitter->data = array();
    $obj_twitter->color = '#2DAAE1';
    $obj_twitter->connectNulls = false;

    $obj_facebook = new stdClass();
    $obj_facebook->name = 'facebook';
    $obj_facebook->data = array();
    $obj_facebook->color = '#3B5998';
    $obj_facebook->connectNulls = false;

    $obj_googleplus = new stdClass();
    $obj_googleplus->name = 'googleplus';
    $obj_googleplus->data = array();
    $obj_googleplus->color = '#D0422A';
    $obj_googleplus->connectNulls = false;

    $obj_linkedin = new stdClass();
    $obj_linkedin->name = 'linkedin';
    $obj_linkedin->data = array();
    $obj_linkedin->color = '#1783BC';
    $obj_linkedin->connectNulls = false;

    $obj_pinterest = new stdClass();
    $obj_pinterest->name = 'pinterest';
    $obj_pinterest->data = array();
    $obj_pinterest->color = '#CA2128';
    $obj_pinterest->connectNulls = false;

    $created_date = date("Y-m-d", $node->created);



    // If the creation date is < of the first share, create a first record empty

    $first_date = key($stats);
    end($stats);
    $last_date = key($stats);
    reset($stats);

    if ($created_date < $first_date) {

      $d = _lightsocialbuttons_stats_uty_jsdate($created_date);
      $obj_facebook->data[] = array($d, 0);
      $obj_twitter->data[] = array($d, 0);
      $obj_linkedin->data[] = array($d, 0);
      $obj_googleplus->data[] = array($d, 0);
      $obj_pinterest->data[] = array($d, 0);
    }

    $T0 = microtime(true);

    $D0 = new DateTime($created_date);
    $df = $D0->format('Y-m-d');

    $o = (object) array(
      'facebook'=>0,
      'twitter'=>0,
      'linkedin'=>0,
      'googleplus'=>0,
      'pinterest'=>0,
    );


    while ($D0->format('Y-m-d') <= $last_date) {

      if(isset($stats[$df])){
        $o = $stats[$df];
      }

      $d = _lightsocialbuttons_stats_uty_jsdate($df);
      $obj_facebook->data[] = array($d, (int) $o->facebook);
      $obj_twitter->data[] = array($d, (int) $o->twitter);
      $obj_linkedin->data[] = array($d, (int) $o->linkedin);
      $obj_googleplus->data[] = array($d, (int) $o->googleplus);
      $obj_pinterest->data[] = array($d, (int) $o->pinterest);

      $D0->modify('+1 day');
      $df = $D0->format('Y-m-d');
    }


    /*
    foreach ($stats as $k => $o){

      
        
      }
    
   
      $d = _lightsocialbuttons_stats_uty_jsdate($o->shday);
      $obj_facebook->data[] = array($d, (int) $o->facebook);
      $obj_twitter->data[] = array($d, (int) $o->twitter);
      $obj_linkedin->data[] = array($d, (int) $o->linkedin);
      $obj_googleplus->data[] = array($d, (int) $o->googleplus);
      $obj_pinterest->data[] = array($d, (int) $o->pinterest);

      // $DTlast = $DT;
    }
    */


    $series = array(
      $obj_facebook,
      $obj_twitter,
      $obj_googleplus,
      $obj_linkedin,
      $obj_pinterest,
    );

    $last_key = count($stats)-1;

    $tot_last = $obj_facebook->data[$last_key][1]
              + $obj_twitter->data[$last_key][1]
              + $obj_linkedin->data[$last_key][1]
              + $obj_googleplus->data[$last_key][1]
              + $obj_pinterest->data[$last_key][1];

    if($tot_last > 10000){
      $add_label = " (thousands)";
      $js_return = 'Math.round(this.value / 1000)';
    }
    else{
      $add_label = '';
      $js_return = 'this.value';
    }
  

    $GRAPH_JS = array(
      'highcharts' => '//cdnjs.cloudflare.com/ajax/libs/highcharts/4.1.3/highcharts.js',
    );

    $series_js = json_encode($series);

    $series_js = str_replace( array('["Date', ')",'), array('[Date', '),') , $series_js);

    $graph_title = t('Shares Growth by Social Media');
    
    $JS="
    jQuery(document).ready( function() {
      jQuery('#lsb_chart_div').highcharts({
          chart: {
              type: 'area'
          },
          title: {
              text: '" . $graph_title . "'
          },
          subtitle: {
              text: 'From the publication date to the last share'
          },
          xAxis: {
              tickmarkPlacement: 'on',
              title: {
                  enabled: false
              },
              type: 'datetime',
              dateTimeLabelFormats: {
                  day: '%m-%d'   
              },
              //tickInterval: 24 * 3600 * 1000,
              tickPixelInterval: 30,
              min: " . _lightsocialbuttons_stats_uty_jsdate($created_date) . "
          },
          yAxis: {
              title: {
                  text: 'Number of shares " . $add_label . "'
              },
              labels: {
                  formatter: function () {
                      return " . $js_return . ";
                  }
              }
          },
          tooltip: {
              shared: true,
              valueSuffix: ''
          },
          plotOptions: {
              area: {
                  stacking: 'normal',
                  lineColor: '#666666',
                  lineWidth: 1,
                  marker: {
                      lineWidth: 1,
                      lineColor: '#666666'
                  }
              }
          },
          series: " . $series_js . "
      });
    });
    ";

    $html='<div id="lsb_chart_div" style="height: 500px;"></div>';

    drupal_add_js($GRAPH_JS['highcharts'], 'external');
    drupal_add_js($JS, 'inline');
  }
  else{
    $html=t('There are still no sharing data for this content');
  }
  
  return $html;
}

function lightsocialbuttons_stats_lightsocialbuttons_alter($data){

  global $user;

  $LS = new LightSocialButtonsStats($data['url']);
  $last_count = $LS->last_count();

  $data['shday']=date('Y-m-d');

  $debug['last_count']=(empty($last_count));
  $debug['last_counttot']= $last_count['tot'];
  $debug['tot']= $data['tot'];
  $debug['data']=$data;

  if (empty($last_count) || (intval($last_count['tot']) != intval($data['tot']))) {
    $result = $LS->write_log($data);
  }
  else {
    
  }

  return '';
}